<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>IT Gumby's blog</title>
    <link>http://itgumby.github.io</link>
    <atom:link href="http://itgumby.github.io/feed.xml" rel="self" type="application/rss+xml" />
    <description>IT Gumby's blog RSS feed</description>
    <language>en-US</language>
    <pubDate>Sun, 10 Jan 2016 22:16:10 -0700</pubDate>
    <lastBuildDate>Sun, 10 Jan 2016 22:16:10 -0700</lastBuildDate>

    <item>
      <title>Simple SOAP Example</title>
      <link>http://itgumby.github.io/blog/2014/simple-soap-example.html</link>
      <pubDate>Thu, 23 Oct 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/simple-soap-example.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All I wanted was a JVM-based script exemplifying a simple SOAP call.
However, I wasn&amp;#8217;t satisfied with their complexity and pieces.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Best practices have established using a &lt;a href=&quot;http://docs.spring.io/spring-ws/site/reference/html/why-contract-first.html&quot;&gt;contract-first&lt;/a&gt; approach is more reliable and resilient.
Spring also documented the prototypical Java SOAP client: &lt;a href=&quot;http://spring.io/guides/gs/consuming-web-service/&quot;&gt;Consuming a SOAP web service&lt;/a&gt;.
The example has a clear classes &amp;amp; separation of concerns, but still requires a build file to generate code from the WSDL using JAXB.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_my_simple_example_in_groovy&quot;&gt;My Simple Example: in Groovy&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My example breaks the client into 3 parts:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;olist arabic&quot;&gt;
&lt;ol class=&quot;arabic&quot;&gt;
&lt;li&gt;
&lt;p&gt;Creating the Request&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get the Response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Extracting Data&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_creating_the_request&quot;&gt;Creating the Request&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The traditional approach creates an object, then marshalls it (converts object to a string).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String buildRequest(String zip) {
    def writer = new StringWriter()
    def builder = new MarkupBuilder(writer)

    builder.GetCityForecastByZIP(xmlns: &quot;http://ws.cdyne.com/WeatherWS/&quot;) {
        ZIP(zip)
    }
    return writer.toString()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy&amp;#8217;s &lt;a href=&quot;http://groovy.codehaus.org/Creating+XML+using+Groovy&amp;#8217;s+MarkupBuilder&quot;&gt;MarkupBuilder&lt;/a&gt; makes it super easy to safely build XML (or HTML).
It can handle attributes, escaping content, and even namespaces!
The XML is patterned from the WSDL&amp;#8217;s Request object manually, or using &lt;a href=&quot;http://www.soapui.org/&quot;&gt;SoapUI&lt;/a&gt; to build it from the WSDL.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_get_the_response&quot;&gt;Get the Response&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Both examples use Spring&amp;#8217;s WebServiceTemplate methods.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;String callSoapWeather(String body) {
    def msgFactory = new SaajSoapMessageFactory()
    msgFactory.afterPropertiesSet()

    def wsTemplate = new WebServiceTemplate(msgFactory)
    wsTemplate.setDefaultUri(&quot;http://wsf.cdyne.com/WeatherWS/Weather.asmx&quot;)

    def writer = new StringWriter()
    try {
        wsTemplate.sendSourceAndReceiveToResult(
            new StringSource(body),
            new SoapActionCallback(&quot;http://ws.cdyne.com/WeatherWS/GetCityForecastByZIP&quot;),
            new StreamResult(writer)
        )
    } catch (Exception e) { println &quot;ERROR: ${e.message} - ${e.cause}&quot; }
    return writer.toString()
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Spring&amp;#8217;s &lt;a href=&quot;http://docs.spring.io/spring-ws/site/reference/html/client.html&quot;&gt;WebServices and Templates&lt;/a&gt; handles calling the SOAP service, callback status and converting the response stream back into a string.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_extracting_data&quot;&gt;Extracting Data&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Instead of unmarshalling (converting a string to an object):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;void printResults(String response) {
    final xml = new XmlSlurper().parseText(response)
    def nodes = xml.GetCityForecastByZIPResult
    println &quot;Forecast for ${nodes.City}, ${nodes.State}&quot;

    def format = new SimpleDateFormat(&quot;yyyy-MMM-dd&quot;)
    nodes.ForecastResult.children().each { forecast -&amp;gt;
        def inDate = new Date().parse(&quot;yyyy-MM-dd&apos;T&apos;HH:mm:ss&quot;, forecast.Date as String)
        println &quot;${format.format(inDate)} ${forecast.Description} ${forecast.Temperatures.MorningLow} - ${forecast.Temperatures.DaytimeHigh}&quot;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Groovy&amp;#8217;s &lt;a href=&quot;http://groovy.codehaus.org/Reading+XML+using+Groovy&amp;#8217;s+XmlSlurper&quot;&gt;XmlSlurper&lt;/a&gt; takes the place of traditional JAXB unmarshalling.
Instead of mapping XML into Objects, XmlSlurper parses the string into Nodes and &lt;a href=&quot;http://groovy.codehaus.org/api/groovy/util/slurpersupport/GPathResult.html&quot;&gt;GPathResults&lt;/a&gt;.
As long as the names of the nodes you need don&amp;#8217;t change, you can name the path to the data, or even &lt;code&gt;.depthFirst().collect{ it }.findAll{ it.name() == &quot;NODE_NAME&quot; }&lt;/code&gt; which allows the path to change and still work.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_conclusion&quot;&gt;Conclusion&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;SOAP doesn&amp;#8217;t have to be intimidating on the JVM platform.
I hope others find the contrast with the traditional JAXB approach informative.
My full working &lt;a href=&quot;https://gist.github.com/ItGumby/3fe5c317dc4c898c133c&quot;&gt;SimpleSoap.groovy&lt;/a&gt; is posted as a single file in a gist.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>CQ Queries Demystified</title>
      <link>http://itgumby.github.io/blog/2014/cq-queries-demystified.html</link>
      <pubDate>Thu, 9 Oct 2014 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2014/cq-queries-demystified.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The JCR (Java Content Repository) is a data-store at its heart.  Most examples around it demonstrate either building components or walking the Node tree.  It is hard to find examples around queries and the JCR.  To make things worse, we have a number of options and little resourcs to compare them.  My humble goal is to make JCR queries less scary - to myself and others.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_why_use_queries&quot;&gt;Why Use Queries?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I see 2 primary benefits to using queries compared to &quot;walking the nodes&quot;: efficiency and flexibility.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Queries can be &lt;strong&gt;more efficient&lt;/strong&gt; when the desired nodes/pages are &quot;sparse&quot;.  By sparse, I mean you have to visit a lot more nodes than you keep.  In my recent experience, I was looking for approximately 200-300 pages out of 2,000.  Converting from page traversal to a query improved performance by an order of magnitude (from approximately 10 sec. to well under a second.)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Queries also permit &lt;strong&gt;flexibility in structure&lt;/strong&gt;.  &lt;a href=&quot;http://wiki.apache.org/jackrabbit/DavidsModel#Rule_.231&quot;&gt;David&amp;#8217;s Rules&lt;/a&gt; encourage prioritizing content over formal structure.  If walking the tree of nodes or pages, a developer may limit depth of searching (either a flat level or limited recursion) for simplicity of code and/or performance.  However, in a CMS environment, there are tremendous benefits for authors when they can create an arbitrary taxonomy around their data or pages.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two primary APIs for Querying in CQ5:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;javax.jcr.query&lt;/code&gt; provides a query interface API in a variety of syntaxes.  &lt;a href=&quot;http://www.day.com/specs/javax.jcr/javadocs/jcr-2.0/javax/jcr/query/QueryResult.html&quot;&gt;QueryResult&lt;/a&gt; can return &lt;a href=&quot;http://www.day.com/specs/javax.jcr/javadocs/jcr-2.0/javax/jcr/NodeIterator.html&quot;&gt;NodeIterators&lt;/a&gt; or &lt;a href=&quot;http://www.day.com/specs/javax.jcr/javadocs/jcr-2.0/javax/jcr/query/RowIterator.html&quot;&gt;RowIterators&lt;/a&gt; (where a &lt;a href=&quot;http://www.day.com/specs/javax.jcr/javadocs/jcr-2.0/javax/jcr/query/Row.html&quot;&gt;Row&lt;/a&gt; can have 1 or more columns. Columns can be http://www.day.com/specs/javax.jcr/javadocs/jcr-2.0/javax/jcr/Node.html[Node] node,  http://www.day.com/specs/javax.jcr/javadocs/jcr-2.0/javax/jcr/Value.html[Value] property, String path or double score).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;com.day.cq.search&lt;/code&gt; provides both a REST interface and an API.  The &lt;a href=&quot;http://docs.adobe.com/docs/en/aem/6-0/develop/ref/javadoc/com/day/cq/search/result/SearchResult.html&quot;&gt;SearchResult&lt;/a&gt; can return Iterator&amp;lt;Resource&amp;gt;, Iterator&amp;lt;Node&amp;gt;, or List&amp;lt;http://docs.adobe.com/docs/en/aem/6-0/develop/ref/javadoc/com/day/cq/search/result/ResultPage.html[ResultPage]&amp;gt; that match the Predicates.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_preconditions&quot;&gt;Preconditions&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;CQ5 searches are &quot;powered by&quot; &lt;a href=&quot;http://lucene.apache.org/&quot;&gt;Apache Lucene&lt;/a&gt; (although AEM6 is converting to &lt;a href=&quot;http://lucene.apache.org/solr/&quot;&gt;Apache Solr&lt;/a&gt;).  An important limitation is that indexing only examines Node properties that are 16KB or less in size - so anything larger won&amp;#8217;t be found by any searching mechanism.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Internally, the queries are converted to an AQM (Abstract Query Model).  The interesting aspect about AQM is the ability to create new query syntaxes and predicates - but that is well beyond the scope of this post.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_nodetypes&quot;&gt;NodeTypes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I recommend paying attention to the &lt;a href=&quot;http://jackrabbit.apache.org/node-type-visualization.html&quot;&gt;NodeType&lt;/a&gt; you use.  At the top of the hierarchy tree is &lt;code&gt;nt:base&lt;/code&gt;, (so all nodes inherit from it).  Because of this inheritance, most examples show using it as a &quot;works anywhere&quot; approach.  However, I feel this is a poor approach and you would be better served selecting a more appropriate type (&lt;code&gt;jcr:primaryType&lt;/code&gt; property of your desired nodes).  I would like to highlight:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cq:Page&lt;/code&gt; to match just &lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/Page.html&quot;&gt;Page&lt;/a&gt; nodes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;cq:PageContent&lt;/code&gt; to easily convert to &lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/commons/inherit/InheritanceValueMap.html&quot;&gt;InheritanceValueMap&lt;/a&gt; or &lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/org/apache/sling/api/resource/ValueMap.html&quot;&gt;ValueMap&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nt:unstructured&lt;/code&gt; to find content nodes for generic components or content&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_jcr_queries_a_href_http_www_day_com_specs_javax_jcr_javadocs_jcr_2_0_javax_jcr_query_query_html_javax_jcr_query_a&quot;&gt;JCR Queries: &lt;a href=&quot;http://www.day.com/specs/javax.jcr/javadocs/jcr-2.0/javax/jcr/query/Query.html&quot;&gt;javax.jcr.query&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. jcr.query Syntaxes&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Syntax&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cons&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Pros&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://jackrabbit.apache.org/api/2.2/org/apache/jackrabbit/commons/query/sql2/package-summary.html&quot;&gt;SQL2&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;poor documentation&lt;br&gt;
no sub-queries&lt;br&gt;
limited joins&lt;br&gt;
new functions&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&quot;looks&quot; like a query&lt;br&gt;
limited joins (K.I.S.S. principle)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://jackrabbit.apache.org/api/2.2/org/apache/jackrabbit/spi/commons/query/xpath/package-summary.html&quot;&gt;XPath&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&quot;strange&quot; syntax (&lt;a href=&quot;http://zvon.org/comp/r/tut-XPath_1.html#intro&quot;&gt;Tutorials exist&lt;/a&gt;)&lt;br&gt;
deprecated in JCR2.0 (yet still supported)&lt;br&gt;
many XPath functions missing&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;maturity &amp;amp; performance&lt;br&gt;
generic (outside JCR) solution for structure/nodes/attributes&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://www.day.com/maven/javax.jcr/javadocs/jcr-2.0/javax/jcr/query/qom/QueryObjectModelFactory.html?is-external=true&quot;&gt;JQOM&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;poor documentation&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;build own query language/API&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;SQL&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;no longer supported&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;N/A&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Query Example&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-jsp&quot; data-lang=&quot;jsp&quot;&gt;&amp;lt;%--
  JCR Query API component.
  Component for dumping list of components found
--%&amp;gt;&amp;lt;%@page session=&quot;false&quot; %&amp;gt;
&amp;lt;%@include file=&quot;/libs/foundation/global.jsp&quot;%&amp;gt;
&amp;lt;%@page import=&quot;javax.jcr.query.Query, java.util.Iterator&quot; %&amp;gt;
&amp;lt;h2&amp;gt;Components from javax.jcr.query&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;# &amp;lt;strong&amp;gt;Component Title&amp;lt;/strong&amp;gt; path&amp;lt;/li&amp;gt;
&amp;lt;%
    // final String xpath = &quot;/jcr:root/apps//element(*, cq:Component) order by @jcr:title&quot;;
    // Iterator&amp;lt;Resource&amp;gt; rscIterator = resourceResolver.findResources(xpath, Query.XPATH);
    final String sql2 = &quot;SELECT * FROM [cq:Component] AS c WHERE ISDESCENDANTNODE([/apps]) ORDER BY lower(c.[jcr:title])&quot;;
    Iterator&amp;lt;Resource&amp;gt; rscIterator = resourceResolver.findResources(sql2, Query.JCR_SQL2);
%&amp;gt;
  &amp;lt;c:forEach var=&quot;compRsc&quot; items=&quot;&amp;lt;%= rscIterator %&amp;gt;&quot; varStatus=&quot;i&quot;&amp;gt;
    &amp;lt;%-- conversion steps to aid in getting Resource properties --%&amp;gt;
    &amp;lt;c:set var=&quot;compProps&quot; value=&quot;&amp;lt;%= ((Resource)pageContext.getAttribute(&quot;compRsc&quot;)).adaptTo(ValueMap.class) %&amp;gt;&quot; /&amp;gt;
    &amp;lt;li&amp;gt;${i.count}: &amp;lt;strong&amp;gt;${compProps[&apos;jcr:title&apos;]}&amp;lt;/strong&amp;gt; ${compRsc.path}&amp;lt;/li&amp;gt;
  &amp;lt;/c:forEach&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Prefer Resource over Node.  It has a cleaner, easier to use API.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
Leverage JSP Expression Language &amp;amp; &lt;a href=&quot;http://www.tutorialspoint.com/jsp/jsp_standard_tag_library.htm&quot;&gt;JSTL&lt;/a&gt; to keep the JSP Template simple &amp;amp; clear.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_querybuilder_api_a_href_http_docs_adobe_com_docs_en_cq_current_javadoc_com_day_cq_search_package_summary_html_com_day_cq_search_a&quot;&gt;QueryBuilder API: &lt;a href=&quot;http://docs.adobe.com/docs/en/cq/current/javadoc/com/day/cq/search/package-summary.html&quot;&gt;com.day.cq.search&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. QueryBuilder Syntaxes&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 20%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;col style=&quot;width: 40%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Syntax&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Cons&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Pros&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://docs.adobe.com/docs/en/aem/6-0/develop/ref/javadoc/com/day/cq/search/QueryBuilder.html&quot;&gt;Java API&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;More code to setup&lt;br&gt;
node property values must be extracted (just like JCR Queries)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Iterators for Resources, Nodes (your choice)&lt;br&gt;
Lists of Pages (natural for search results pages)&lt;br&gt;
Predicates make &quot;sense&quot; as search conditions&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&quot;RESTful&quot; interface at &lt;a href=&quot;http://docs.adobe.com/docs/en/aem/6-0/develop/search/querybuilder-api.html&quot;&gt;/bin/querybuilder.json&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;grouping predicates is more complex (naming predicates)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;dynamic at runtime&lt;br&gt;
documented examples of multi properties/values/nesting&lt;br&gt;
easy to test/explore via browser, curl&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Query Example&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-jsp&quot; data-lang=&quot;jsp&quot;&gt;&amp;lt;%--
  CQ Query API component.
  Component for dumping list of components found
--%&amp;gt;&amp;lt;%@page session=&quot;false&quot; %&amp;gt;
&amp;lt;%@include file=&quot;/libs/foundation/global.jsp&quot;%&amp;gt;
&amp;lt;%@page import=&quot;java.util.*, com.day.cq.search.*, com.day.cq.search.result.*&quot; %&amp;gt;
&amp;lt;h2&amp;gt;Components from com.day.cq.search (QueryBuilder)&amp;lt;/h2&amp;gt;
&amp;lt;ul&amp;gt;
    &amp;lt;li&amp;gt;# &amp;lt;strong&amp;gt;Component Title&amp;lt;/strong&amp;gt; path&amp;lt;/li&amp;gt;
&amp;lt;%
    Map&amp;lt;String, String&amp;gt; predicates = new HashMap&amp;lt;String, String&amp;gt;() {{
        put(&quot;path&quot;, &quot;/apps&quot;);
        put(&quot;type&quot;, &quot;cq:Component&quot;);
        put(&quot;orderby&quot;, &quot;@jcr:title&quot;);
    }};

    QueryBuilder qb = resourceResolver.adaptTo(QueryBuilder.class);
    Session session = resourceResolver.adaptTo(Session.class);

    Query query = qb.createQuery(PredicateGroup.create(predicates), session);
    query.setHitsPerPage(0); // return ALL results
    Iterator&amp;lt;Resource&amp;gt; rscIterator = query.getResult().getResources();
%&amp;gt;
  &amp;lt;c:forEach var=&quot;compRsc&quot; items=&quot;&amp;lt;%= rscIterator %&amp;gt;&quot; varStatus=&quot;i&quot;&amp;gt;
    &amp;lt;%-- conversion steps to aid in getting Resource properties --%&amp;gt;
    &amp;lt;c:set var=&quot;compProps&quot; value=&quot;&amp;lt;%= ((Resource)pageContext.getAttribute(&quot;compRsc&quot;)).adaptTo(ValueMap.class) %&amp;gt;&quot; /&amp;gt;
    &amp;lt;li&amp;gt;${i.count}: &amp;lt;strong&amp;gt;${compProps[&apos;jcr:title&apos;]}&amp;lt;/strong&amp;gt; ${compRsc.path}&amp;lt;/li&amp;gt;
  &amp;lt;/c:forEach&amp;gt;
&amp;lt;/ul&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock tip&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Tip&lt;/div&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
JSPs are best kept as templates with little to no Java in them.  In practice,
move the Java to an OSGi-managed class (Model).  If built outside of CQ5, this permits
rapid unit testing and potentially other JVM languages such as groovy.
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;REST Example: &lt;a href=&quot;http://localhost:4502/bin/querybuilder.json?type=cq:Component&amp;amp;path=/apps&amp;amp;orderby=@title&amp;amp;orderby.sort=asc&quot; class=&quot;bare&quot;&gt;http://localhost:4502/bin/querybuilder.json?type=cq:Component&amp;amp;path=/apps&amp;amp;orderby=@title&amp;amp;orderby.sort=asc&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_other_resources&quot;&gt;Other Resources&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://wiki.magnolia-cms.com/display/WIKI/JCR+Query+Cheat+Sheet&quot;&gt;JCR+Query+Cheat+Sheet&lt;/a&gt; for comparing syntaxes&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://labs.sixdimensions.com/blog/2014-10-07/9-jcr-sql-2-queries-every-aem-dev-should-know/&quot;&gt;9 JCR-SQL2 Queries Every AEM Developer Should Know&lt;/a&gt; by Dan Klco&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://helpx.adobe.com/experience-manager/kb/HowToDebugJCRQueries.html&quot;&gt;HowToDebugJCRQueries.html&lt;/a&gt;
discusses adding loggers to a new file (separate from standard error.log) at the DEBUG level.
This logs the queries executed and their execution time.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sql2_functions_from_a_href_http_www_day_com_specs_jcr_2_0_6_query_html_6_6_2_20jcr_sql2_20notation_jcr_v2_0_spec_a&quot;&gt;SQL2 functions (from &lt;a href=&quot;http://www.day.com/specs/jcr/2.0/6_Query.html#6.6.2%20JCR-SQL2%20Notation&quot;&gt;JCR v2.0 Spec&lt;/a&gt;)&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CONTAINS(&lt;em&gt;propName&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ISCHILDNODE() &lt;em&gt;immediate relationship&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ISDESCENDANTNODE() &lt;em&gt;nested relationship&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ISSAMENODE() &lt;em&gt;for join conditions&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LENGTH(&lt;em&gt;propName&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NAME()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LOCALNAME()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LOWER() &lt;em&gt;lower case the text&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;UPPER() &lt;em&gt;upper case the text&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SCORE()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;CAST(&lt;em&gt;literal&lt;/em&gt; AS &lt;em&gt;type&lt;/em&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>CQ5 resource - &lt;cq:defineObjects/&gt; CheatSheet</title>
      <link>http://itgumby.github.io/blog/2014/cq-defineObjects-cheatsheet.html</link>
      <pubDate>Sun, 16 Feb 2014 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2014/cq-defineObjects-cheatsheet.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;https://dev.day.com/docs/en/cq/current/developing/components.html#%3Ccq:defineObjects%3E&quot;&gt;CQ5 Developing Components&lt;/a&gt;
has a lot of information, but I wanted a handier cheat sheet.&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Objects from &amp;lt;cq:defineobjects/&amp;gt; (as of CQ5.6)&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;JavaDoc&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;my favorite methods&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;component&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/index.html?com/day/cq/wcm/api/components/Component.html&quot;&gt;Component&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the current AEM component object of the current resource&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getName() / getPath()&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;componentContext&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/index.html?com/day/cq/wcm/api/components/ComponentContext.html&quot;&gt;ComponentContext&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the current component context object of the request&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getPage() / getResource() / setDecorate(boolean)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;currentDesign&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/designer/Design.html&quot;&gt;Design&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the current design object of the current page&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getStaticCssPath() / getStyle(_) / writeCss(Writer, boolean) / writeCssIncludes(_)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;currentPage&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/Page.html&quot;&gt;Page&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the current AEM WCM page object&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getName() / getTitle() / getNavigationTitle() / getTags() / getContentResource() / getDepth() / getPageManager()&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;currentStyle&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/designer/Style.html&quot;&gt;Style&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the current style object of the current cell&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;designer&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/designer/Designer.html&quot;&gt;Designer&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the designer object used to access design information&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getDesign(_) / getStyle(_)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;editContext&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/components/EditContext.html&quot;&gt;EditContext&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the edit context object of the AEM component&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;-&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;pageManager&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/PageManager.html&quot;&gt;PageManager&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the page manager object for page level operations&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getPage(path) / create/ copy/ delete/ move/ order(_) / getRevisions(_)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;pageProperties&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/commons/inherit/InheritanceValueMap.html&quot;&gt;InheritanceValueMap&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the page properties object of the current page&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getInherited(name,default) / get(name,default) / put(key,val)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;properties&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/org/apache/sling/api/resource/ValueMap.html&quot;&gt;ValueMap&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the properties object of the current resource&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;get(name,defaultVal) / put(key,val) &lt;a href=&quot;http://experiencedelivers.adobe.com/cemblog/en/experiencedelivers/2013/02/valuemap-and-his-friend.html&quot;&gt;examples&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;resourceDesign&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/designer/Design.html&quot;&gt;Design&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the design object of the resource page&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;see currentDesign&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;resourcePage&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/com/day/cq/wcm/api/Page.html&quot;&gt;Page&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the resource page object&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;see currentPage&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attributes provided by &lt;code&gt;cq:defineObjects&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;componentContextName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;componentName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;currentDesignName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;currentPageName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;currentStyleName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;designerName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;editContextName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nodeName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pageManagerName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;pagePropertiesName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;propertiesName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;requestName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resourceDesignName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resourceName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resourcePageName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resourceResolverName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;slingName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &amp;lt;cq:defineObjects&amp;gt; tag also automatically includes &amp;lt;sling:defineObjects/&amp;gt;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Objects from &amp;lt;sling:defineObjects/&amp;gt; (as of CQ5.6)&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Name&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;JavaDoc&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;my favorite methods&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;currentNode&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://www.day.com/maven/javax.jcr/javadocs/jcr-1.0/javax/jcr/Node.html&quot;&gt;Node&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;JCR node for current resource (not defined if not)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;discourage in favor of Resource or ValueMap&lt;/em&gt; addNode(_) / getUUID()&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;log&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://www.slf4j.org/api/org/slf4j/Logger.html&quot;&gt;SLF4J.Logger&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Provides an SLF4J Logger for logging to the Sling log system from within scripts&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;error / warn / info / debug&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;resource&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/org/apache/sling/api/resource/Resource.html&quot;&gt;Resource&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;the current Resource object to handle (depending on the URL of the request)&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getName() / getPath() / getChild(path) / getChildren()&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;resourceResolver&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/org/apache/sling/api/resource/ResourceResolver.html&quot;&gt;ResourceResolver&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;The current ResourceResolver object&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;create(args) / commit() / getResource(_) / resolve(_) / queryResources(query, lang)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;sling&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/index.html?org/apache/sling/api/scripting/SlingScriptHelper.html&quot;&gt;SlingScriptHelper&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;convenience methods for scripts.  GOD Object.&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getService(Class) / include(_) / forward(_) / getRequest() / getResponse() / getScript()&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;slingRequest&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/org/apache/sling/api/SlingHttpServletRequest.html&quot;&gt;SlingHttpServletRequest&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;extends &lt;a href=&quot;http://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletRequest.html&quot;&gt;HttpServletRequest&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;getResource() / getCookie(name) / getRequestParameterMap() / getRequestParameters(name) / getRequestPathInfo()&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;slingResponse&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;a href=&quot;http://dev.day.com/docs/en/cq/current/javadoc/org/apache/sling/api/SlingHttpServletResponse.html&quot;&gt;SlingHttpServletResponse&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;extends &lt;a href=&quot;http://docs.oracle.com/javaee/1.4/api/javax/servlet/http/HttpServletResponse.html&quot;&gt;HttpServletResponse&lt;/a&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;static fields / addCookie(cookie) / getOutputStream() / getWriter()&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Attributes provided by &lt;code&gt;sling:defineObjects&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;logName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nodeName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;requestName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resourceResolverName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;responseName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;slingName&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I hope this helps others and myself.&lt;/p&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>The Evolution of Looping</title>
      <link>http://itgumby.github.io/blog/2013/the-evolution-of-looping.html</link>
      <pubDate>Sat, 23 Nov 2013 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2013/the-evolution-of-looping.html</guid>
      	<description>
	&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_tl_dr&quot;&gt;TL;DR&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are two primary approaches to programming:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;dlist&quot;&gt;
&lt;dl&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;imperative&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;the &quot;classical&quot; approach where the code describes &lt;em&gt;how&lt;/em&gt; to accomplish something&lt;/p&gt;
&lt;/dd&gt;
&lt;dt class=&quot;hdlist1&quot;&gt;declarative&lt;/dt&gt;
&lt;dd&gt;
&lt;p&gt;the &quot;functional&quot; approache where the code describes &lt;em&gt;what&lt;/em&gt;  to accomplish&lt;/p&gt;
&lt;/dd&gt;
&lt;/dl&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The evolution of looping remarks on the steps from looping in an imperative style to functional programming
that expresses intent and frees the language/compiler/machine to select potentially better
mechanisms of &lt;em&gt;how&lt;/em&gt; to accomplish the task.  A tangible benefit of functional approaches
is code that expreses intent, which makes bugs easier to identify and solve.  It doesn&amp;#8217;t
hurt that the lines of code can often get shorter.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My list of looping approaches (with un-official terms):&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;while/until&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for with iterator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;for each&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;forEach (functional)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_examples&quot;&gt;Examples&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I started with examples written in JavaScript, but &quot;for each&quot; and &quot;forEach&quot; weren&amp;#8217;t
as clear as examples written in other languages.  So I re-wrote the examples in Groovy,
a language related to Java that requires less boilerplate.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;while (or &quot;until&quot; to test at end of loop)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;List&amp;lt;Integer&amp;gt; input = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Integer sum = 0     // mutating sum

def i = 0               // iterator set to starting position of collection
def max = input.size()  // calculate end position once
while (i &amp;lt; max) {       // test if continue looping
    def val = input[i]; // get value from array
    sum += val;         // change state of the sum
    i++;                // increment iterator
}
println &quot;result of while() sum = ${sum}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;for loop&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;List&amp;lt;Integer&amp;gt; input = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Integer sum = 0     // mutating sum

def max = input.size()          // calculate end position once
for (int i = 0; i &amp;lt; max; i++) { // declare iterator, test &amp;amp; increment statements
    def val = input[i];         // get value from array
    sum += val;                 // change state of the sum
}
println &quot;result of for(;;) sum = ${sum}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;for each/in&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;List&amp;lt;Integer&amp;gt; input = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Integer sum = 0     // mutating sum

for (Integer val : input) {
    sum += val
}
println &quot;for(each) sum =&amp;gt; ${sum}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;each (or &quot;forEach&quot; in Java8)&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;List&amp;lt;Integer&amp;gt; input = [1, 2, 3, 4, 5, 6, 7, 8, 9]
Integer sum = 0     // mutating sum

input.each { Integer val -&amp;gt;  // explicitly declare type &amp;amp; name; groovy defaults to &quot;it&quot;
    sum += val
}
println &quot;[].each() sum =&amp;gt; ${sum}&quot;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_trends&quot;&gt;Trends&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The iterators started externally, then gradually moved internal to the loop, and finally disappeared.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The lines of code also dropped, although some of the intermediate steps had some busy lines.
For instance, for(;;) has the same work as the while() loop by essentially combining lines.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The general trend is from imperative (how) to declarative (what) code.
Less declarations for how to accomplish a task, the less opportunities for defects to be unintentionally introduced.
Also, the environment has more opportunities to optimize the solution, such as parallel processing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;An example of a functional approach to summing (although most will provide a sum() function) can be:&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-groovy&quot; data-lang=&quot;groovy&quot;&gt;List&amp;lt;Integer&amp;gt; input = [1, 2, 3, 4, 5, 6, 7, 8, 9]
def inputSum = input.inject(0, { acc, it -&amp;gt; acc + it })     // most call it &quot;reduce&quot;
println inputSum&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_summary&quot;&gt;Summary&lt;/h3&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Favor declarative over imperative programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Use higher-level constructs in your language&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Favor results over steps.  This leads to functional programming.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prefer immutability over states &amp;amp; transactions&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;final keyword in Java, Groovy to prevent changing state&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Why Octopress</title>
      <link>http://itgumby.github.io/blog/2013/ghp-with-octopress.html</link>
      <pubDate>Sun, 2 Jun 2013 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2013/ghp-with-octopress.html</guid>
      	<description>
	&lt;h2&gt;Static Site Generators FTW&lt;/h2&gt;
&lt;p&gt;A long, long time ago, on web far, far away, the original developers of the web built static pages by hand. Soon, tooling caught up and templates could assemble pages pages together from &quot;content&quot; stored in other sources (usually databases). Eventually, personalization meant every page would be built per request. Since servers had to generate each page instead of returning pre-built files, their scalability was limited.&lt;/p&gt;
&lt;p&gt;Two concepts came to the rescue: REST and Dynamic HTML (which evolved into AJAX). &lt;a href=&quot;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&quot;&gt;Representaional State Transfer or REST&lt;/a&gt; posited that &lt;em&gt;resources&lt;/em&gt; could be more cacheable. And DHTML/AJAX made it common to Create, Replace, Update or Delete &lt;em&gt;portions&lt;/em&gt; of a page. By applying these concepts intelligently, most, if not all, of the pages could be stored and reused. This &lt;em&gt;caching&lt;/em&gt; could be done at different layers, from the data source, to inside the app servers to even the web server.&lt;/p&gt;
&lt;p&gt;With flexible caching strategies, the generation from templates can be moved around and execute less frequently. In the case of blog content, generation only needs to happen at original post and repeated for any edits. (Comments can be AJAX&apos;ed away or moved to external services, such as &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt;.) Flexible generation also allowed questioning the &lt;em&gt;data sources&lt;/em&gt;. Databases had long been the most common data source. But they frequently have specialized administrators. Also, databases excel at structured content while web content is ... well, frequently unstructured.&lt;/p&gt;
&lt;p&gt;Part of &lt;em&gt;&lt;a href=&quot;http://alistapart.com/article/thedisciplineofcontentstrategy&quot;&gt;Content Strategy&lt;/a&gt;&lt;/em&gt; is letting the authors focus on the &lt;em&gt;content&lt;/em&gt;. The content itself may have some structure, but time spent formatting or determining how to get into the data source is wasted effort. &lt;a href=&quot;http://en.wikipedia.org/wiki/Markdown&quot;&gt;MarkDown&lt;/a&gt; and &lt;a href=&quot;http://asciidoctor.org/docs/asciidoc-writers-guide/&quot;&gt;AsciiDoc&lt;/a&gt; have stepped in as generic converters of plain text into HTML. Both focus on the content with minimal syntax or formatting to distract the author from his or her message. &lt;em&gt;Static Site Generators&lt;/em&gt; use some markup flavor with a template engine in a large variety of languages to build static web pages. One of the most popular and mature solutions is &lt;a href=&quot;http://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;, a Ruby solution that transforms &quot;your plain text into static websites and blogs.&quot; Part of its popularity, especially among developers, is jekyll support in &lt;a href=&quot;http://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Pros and Cons of Static Site Generators&lt;/h2&gt;
&lt;p&gt;I built this list by borrowing heavily from &lt;a href=&quot;http://www.mickgardner.com/2012/12/an-introduction-to-static-site.html&quot;&gt;An Intro to Static Site Generators&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;+ Security. No database or live templates to compromise with static content.&lt;/li&gt;
  &lt;li&gt;+ Performance. Just serving files, so web servers have less work to do.&lt;/li&gt;
  &lt;li&gt;+ Content separated from servers. This gives flexibility in hosting (and migration).&lt;/li&gt;
  &lt;li&gt;+ Lowest Common Denominator. Any host can serve HTML (no worries about supporting your language or tools).&lt;/li&gt;
  &lt;li&gt;+ Scalability. If you have more load, add more web servers and rsync (or other copy) the content over.&lt;/li&gt;
  &lt;li&gt;- Updates require generator computers (hard to do from your phone). Some other tools exist to relieve this.&lt;/li&gt;
  &lt;li&gt;- Dynamic content requires external services or tools.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Extending Jekyll&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt; is built on top of Jekyll, so it carries forth all the strengths of it. Octopress starts with smart defaults, such as HTML5 support and &quot;&lt;a href=&quot;http://www.lukew.com/resources/mobile_first.asp&quot;&gt;Mobile First&lt;/a&gt;&quot; responsive design. Its plugin architecture to make it easy to turn features on and off, such as:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Social Integration of Twitter, Google+, Disqus comments&lt;/li&gt;
  &lt;li&gt;HTML5 philosophy, including video tags&lt;/li&gt;
  &lt;li&gt;display source code: includes, gist, partial renders&lt;/li&gt;
  &lt;li&gt;Templates that support pre-processors such as SASS, Haml&lt;/li&gt;
  &lt;li&gt;Themes: &lt;a href=&quot;https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes&quot;&gt;3rd Party&lt;/a&gt; or build your own&lt;/li&gt;
  &lt;li&gt;Category generation&lt;/li&gt;
  &lt;li&gt;Analytics&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Related Posts&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://thepaulrayner.com/blog/2013/02/04/blogging-with-octopress-and-github-pages/&quot;&gt;Paul Rayner &quot;Blogging With Octopress and Github Pages&quot;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.neilsmithline.com/2013/03/octopress-is-pretty-great.html&quot;&gt;Neil Smith &quot;Octopress is Pretty Great&quot;&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/&quot;&gt;Use Octopress instead of Jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://joelmccracken.github.io/entries/octopress-is-pretty-sweet/&quot;&gt;Use Jekyll? You Really Should Be Using Octopress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
	</description>
    </item>
    <item>
      <title>Octopress First Steps</title>
      <link>http://itgumby.github.io/blog/2013/octopress-first-steps.html</link>
      <pubDate>Sun, 2 Jun 2013 00:00:00 -0600</pubDate>
      <guid isPermaLink="false">blog/2013/octopress-first-steps.html</guid>
      	<description>
	&lt;h1&gt;Installation Steps&lt;/h1&gt;
&lt;h2&gt;Prepare&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Ruby Versions &lt;a href=&quot;http://octopress.org/docs/setup/rvm/&quot;&gt;Ruby with RVM&lt;/a&gt; or RBENV&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
  &lt;li&gt;Start GHP &lt;a href=&quot;http://octopress.org/docs/setup/&quot;&gt;octopress setup&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Deploy to GHP &lt;a href=&quot;http://octopress.org/docs/deploying/github/&quot;&gt;Deploy to GitHub Pages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Configure &lt;a href=&quot;http://octopress.org/docs/configuring/&quot;&gt;Configure Octopress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
  &lt;li&gt;future: visit plugins: &lt;a href=&quot;http://jekyllrb.com/docs/plugins/&quot;&gt;Existing Plugins&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
  &lt;li&gt;future: create asciidoc plugin: &lt;a href=&quot;http://jekyllrb.com/docs/contributing/&quot;&gt;Contribute Plugin&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;revisit: 3rd Party Settings: [G+, Disqus, GA]&lt;/li&gt;
  &lt;li&gt;dickens of a time pushing local source branch
    &lt;ul&gt;
      &lt;li&gt;change &lt;code&gt;git config --global push.default current&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;change &lt;code&gt;git branch --set-upstream source origin/source&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;New Post&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;Blogging &lt;a href=&quot;http://octopress.org/docs/blogging/&quot;&gt;Octopress Blogging Basics&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;New Post: &lt;code&gt;rake new_post[&amp;quot;post name&amp;quot;]&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;&quot;Rakefile&quot; dictates the created file&lt;/li&gt;
      &lt;li&gt;default new file: &lt;code&gt;source/_posts/YYYY-MM-DD-post-name.markdown&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;optional &lt;a href=&quot;http://jekyllrb.com/docs/frontmatter/&quot;&gt;yaml front matter&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;author: Your Name&lt;/li&gt;
      &lt;li&gt;published: false &lt;em&gt;# prevents article posting&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;categories: [CSS3, Sass, Media Queries] &lt;em&gt;# single, list, or even dash per line&lt;/em&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;New Page: &lt;code&gt;rake new_page[about]&lt;/code&gt;
    &lt;ul&gt;
      &lt;li&gt;=&amp;gt; ${SITE}/about.html&lt;/li&gt;
      &lt;li&gt;if &lt;code&gt;rake new_page[about/index.markdown]&lt;/code&gt; =&amp;gt; ${SITE}/about/&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Page Content
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://github.com/Shopify/liquid/wiki/Liquid-for-Designers&quot;&gt;Liquid Template features&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://jekyllrb.com/docs/variables/&quot;&gt;Page Variables&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://octopress.org/docs/blogging/code/&quot;&gt;embedded code&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;import into page &lt;a href=&quot;http://octopress.org/docs/plugins/render-partial/&quot;&gt;render partial&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;Preview, Publish&lt;/h3&gt;
&lt;ul&gt;
  &lt;li&gt;Generate, Preview
    &lt;ol&gt;
      &lt;li&gt;&lt;code&gt;rake generate&lt;/code&gt; &lt;em&gt;# Generates posts and pages into the public directory&lt;/em&gt;&lt;/li&gt;
    &lt;/ol&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;rake watch&lt;/code&gt; &lt;em&gt;# Watches source/ and sass/ for changes and regenerates&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;rake preview&lt;/code&gt; # Watches, and mounts a webserver at &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Changes to branch &lt;code&gt;source&lt;/code&gt;
    &lt;ol&gt;
      &lt;li&gt;git checkout source&lt;/li&gt;
    &lt;/ol&gt;
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;rake new_post[&amp;quot;My Post&amp;quot;]&lt;/code&gt; &lt;em&gt;# may need to do in correct shell (for me, bash instead of zsh)&lt;/em&gt;&lt;/li&gt;
      &lt;li&gt;edit post &lt;code&gt;./source/_posts/YYYY-MM-DD-my-post.markdown&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;generate HTML (repeat &lt;code&gt;rake generate; rake watch; rake preview&lt;/code&gt; until satisfied)&lt;/li&gt;
      &lt;li&gt;add source changes &lt;code&gt;git add .; git commit -m &amp;quot;My Post&amp;quot;&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;push source changes &lt;code&gt;git push origin source&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;push generated HTML &lt;code&gt;rake deploy&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Future Enhancements&lt;/h2&gt;
&lt;ul&gt;
  &lt;li&gt;themes: &lt;a href=&quot;https://github.com/imathis/octopress/wiki/3rd-Party-Octopress-Themes&quot;&gt;Octopress Themes&lt;/a&gt; or roll your own&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://erikschwartz.net/jekyll-for-the-masses/&quot;&gt;Prose.io Makes Jekyll Feel Like Wordpress&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;comments &lt;a href=&quot;http://disqus.com/&quot;&gt;Disqus&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
	</description>
    </item>
    <item>
      <title>Command Line Basics</title>
      <link>http://itgumby.github.io/blog/2012/command-line-basics.html</link>
      <pubDate>Sun, 11 Nov 2012 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2012/command-line-basics.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of my favorite features of computers is making them do the work for me.  I tend to think of this as automation.  Command line and shell scripts are a great way to automate tasks.  While Apple has &quot;Automator&quot; and Windows have DOS Batch and PowerShell, Unix shell is my favorite due to its power, availability, and even its philosophy.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unix shell commands are famous for a philosophy of &quot;do one thing, do it well&quot;, and permit chaining of commands to accomplish more complex tasks.  Breaking complex tasks into discrete steps is a good practice for programming, also.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Before tackling full-blown scripts, it is easier to start by &quot;playing&quot; with the individual commands.  Having a good terminal program can greatly aid this.  Terminals are programs that provide access to the computer&amp;#8217;s shell.  &quot;Console&quot; is the name for a special connection to the first shell of a user&amp;#8217;s login, but is  otherwise like other shell sessions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A good terminal application will provide buffers for scrolling through command &amp;amp; output history, make it easy to copy &amp;amp; paste text.  For example, the DOS Command Prompt is pretty painful for copy/paste (menu &quot;Edit&quot;, then copy or paste) while in some programs, a double-click can select entire path &amp;amp; filenames while a triple-click can select the entire line.  Macs ship with &quot;Terminal.app&quot;, but I prefer to use &lt;a href=&quot;http://www.iterm2.com/#/section/home&quot;&gt;iTerm2&lt;/a&gt;.  When working on Windows machines, I prefer to install &lt;a href=&quot;http://sourceforge.net/projects/console/files/&quot;&gt;Console2&lt;/a&gt;.  You can try out alternatives and find your favorite.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unix shells are actually an entire set of applications that interpret commands and built-ins (basically look like commands, but are &quot;built in&quot; to the shell.  There are technically many different shells that have different rules for variables, types, globs - but that is outside the scope of this post.  The shell will &quot;prompt&quot; the user for a command.  The default prompt is &quot;$&quot;, while a prompt of &quot;&amp;gt;&amp;gt;&quot; indicates the shell expects more text before it can process the command(s).  However, both are configurable.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Filenames can be absolute (the entire path from that computers&apos; perspective) or relative to the current directory.  In order to enhance security, most Unix systems will set the path to NOT include the current directory so you don&amp;#8217;t accidentally run a copy of a program that happens to exist in the current directory instead of its &quot;normal&quot; location.  In order to tell the shell you really mean to run the copy in your current directory, prepend &apos;./&apos; to the program/script name (meaning the path is HERE).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you want to pass in a filename to the command, you can pass in the exact filename, a filename pattern (such as *.pdf for any PDF in the current directory) , or even a &quot;glob&quot; (fancier pattern, such as **/*.pdf for any PDF in the current or any child sub-directory at any depth below).  Technically, all 3 are globs. And the fancier glob examples depend on your shell and configuration.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Without further ado, here is a manageable list of unix shell commands that all users should be familiar with.  At first, they may look cryptic, but that is only because they are abbreviations to make it faster to type them.  Once you start dabbling with their options, they may not be so short anymore&amp;#8230;&amp;#8203;&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Listing Files&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14%;&quot;&gt;
&lt;col style=&quot;width: 28%;&quot;&gt;
&lt;col style=&quot;width: 57%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Command&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Example&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ls&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ls –lrtF &amp;lt;dir(s) or file(s)&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;LiSt.  List file(s) in a directory, with flags for order and extra information&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;cd&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;cd &amp;lt;dir name&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ChangeDirectory.  “..” is up 1 dir, “-“ is previous dir. &lt;strong&gt;NOTE:&lt;/strong&gt; Unix uses “/” instead of Window’s “\”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mkdir&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;mkdir &amp;lt;newDir&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MaKeDIRectory.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;cp&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;cp &amp;lt;currentFile&amp;gt; &amp;lt;newFile&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;CoPy.  If destination exists, it will get over-written.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;mv&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;mv &amp;lt;currentFile&amp;gt; &amp;lt;newFile&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MoVe.  (also works for renaming files).  If destination exists, it gets over-written.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;rm&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;rm &amp;lt;fileToDelete&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ReMove.  Deletes a file or set of files.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Viewing text file contents&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14%;&quot;&gt;
&lt;col style=&quot;width: 28%;&quot;&gt;
&lt;col style=&quot;width: 57%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Command&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Example&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;cat&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;cat &amp;lt;file(s)&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;concatenate.  Can dump multiple files to the screen (or get re-directed to another file).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;more&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;more &amp;lt;longFile&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Displays file 1 page at a time.  Page is dynamic to PuTTY screen.  Advance using &amp;lt;space&amp;gt;, quit by typing “q”.  Also see &quot;less&quot; (&quot;less is more&quot;)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;view&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;view &amp;lt;textFile&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Read only vi (text editor).  Has advanced searching, scrolling, etc.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;grep&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;grep &amp;lt;phrase&amp;gt; &amp;lt;fileToSearch&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Search inside files.  Can be literal strings, or advanced regexp (regular expressions – a huge topic by itself).&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;head&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;head [-10] &amp;lt;file(s)&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Display first several lines of a file&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;tail&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;tail [-10] &amp;lt;file(s)&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Display last several lines of a file&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 3. Documentation&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14%;&quot;&gt;
&lt;col style=&quot;width: 28%;&quot;&gt;
&lt;col style=&quot;width: 57%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Command&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Example&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;man&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;man &amp;lt;command&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;MANual.  If you know the command, you can display man pages for it.  If you don&amp;#8217;t know the command name, use &quot;-k&quot; to search for related keywords to find the command&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;cmd&lt;/em&gt; --help&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;man -h&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;strong&gt;By convention&lt;/strong&gt;, commands with the option &quot;-h&quot; or &quot;--help&quot; should provide their own documentation. This applies to scripts you develop, too.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 4. Execution/Job Control&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 14%;&quot;&gt;
&lt;col style=&quot;width: 28%;&quot;&gt;
&lt;col style=&quot;width: 57%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Command&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Example&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ps&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;ps -efx&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;ProccesseS.  List running processes and their IDs.  Each platform often has different flags/options.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;nohup&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;nohup &lt;em&gt;./localScript.sh&lt;/em&gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Prevent interruption.  Prepend to other commands so they can’t be killed or accidentally stopped (ie lost terminal connection)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;kill&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;kill -9 &amp;lt;PID&amp;gt;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Kill a running process by ID (often called &quot;pid&quot;)&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;cmd&lt;/em&gt; &amp;amp;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;code&gt;&lt;em&gt;./runLoad.sh&lt;/em&gt; &amp;amp;&lt;/code&gt;&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Background a command or script.  Returns you to the prompt for other commands and lets first command run in “background”&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
	</description>
    </item>
    <item>
      <title>SQL NULL is not comparable</title>
      <link>http://itgumby.github.io/blog/2008/sql-null-is-not-comparable.html</link>
      <pubDate>Thu, 24 Jan 2008 00:00:00 -0700</pubDate>
      <guid isPermaLink="false">blog/2008/sql-null-is-not-comparable.html</guid>
      	<description>
	&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am starting out with one of my more common mistakes - comparing fields that may be null. In C or programmatical languages, a NULL would equal a NULL. However in SQL, that isn&amp;#8217;t the case.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An artificial example is:&lt;/p&gt;
&lt;/div&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 1. Addresses&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;fName&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;mInit&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;lName&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;George&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;null&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Washington&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;blah&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;John&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;null&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Adams&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;blah&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;John&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Q&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Adams&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;blah&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;table class=&quot;tableblock frame-all grid-all spread&quot;&gt;
&lt;caption class=&quot;title&quot;&gt;Table 2. Orders&lt;/caption&gt;
&lt;colgroup&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;col style=&quot;width: 25%;&quot;&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;fName&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;mInit&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;lName&lt;/th&gt;
&lt;th class=&quot;tableblock halign-left valign-top&quot;&gt;data&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;John&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Q&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Adams&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;blah&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;John&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;null&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Adams&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;blah&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;George&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;null&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;Washington&lt;/p&gt;&lt;/td&gt;
&lt;td class=&quot;tableblock halign-left valign-top&quot;&gt;&lt;p class=&quot;tableblock&quot;&gt;&lt;em&gt;blah&lt;/em&gt;&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_wrong_query&quot;&gt;Wrong Query&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT *
FROM addresses a, orders o
WHERE a.lName = o.lName
  AND a.fName = o.fName
  AND a.mInit = o.mInit&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This returns less records than expected because if mInit column is null for &quot;John Adams&quot; in both tables, it still doesn&amp;#8217;t match. There are generally 2 options for addressing this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;run a function on the nullable columns so null values get cast to a comparable value&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add an OR clause where both columns are null&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;_solutions&quot;&gt;Solutions:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_cast_null_values_via_functions&quot;&gt;cast null values via functions:&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT *
FROM addresses a, orders o
WHERE a.lName = o.lName
  AND a.fName = o.fName
  AND NVL(a.mInit, &quot;&quot;) = NVL(o.mInit, &quot;&quot;)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_extra_clauses&quot;&gt;extra clauses&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint highlight&quot;&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT *
FROM addresses a, orders o
WHERE a.lName = o.lName
  AND a.fName = o.fName
  AND ( (a.mInit = o.mInit) OR (a.mInit IS NULL AND o.mInit IS NULL) )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Neither option is fun (extra code, which is often less readable, or performance hits), but basically required when joining relational tables. If you are comparing similar tables, then you can take advantage of set operators (such as minus/intersect/union in Oracle) and bypass this problem.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
