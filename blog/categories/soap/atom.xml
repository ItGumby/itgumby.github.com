<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: SOAP | IT Gumby]]></title>
  <link href="http://ItGumby.github.io/blog/categories/soap/atom.xml" rel="self"/>
  <link href="http://ItGumby.github.io/"/>
  <updated>2014-10-23T21:27:20-06:00</updated>
  <id>http://ItGumby.github.io/</id>
  <author>
    <name><![CDATA[Brian Street]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Simple SOAP Example]]></title>
    <link href="http://ItGumby.github.io/blog/2014/10/simple-soap-example/"/>
    <updated>2014-10-23T17:04:00-06:00</updated>
    <id>http://ItGumby.github.io/blog/2014/10/simple-soap-example</id>
    <content type="html"><![CDATA[<p>All I wanted was a JVM-based script exemplifying a simple SOAP call.
However, I wasn&rsquo;t satisfied with their complexity and pieces.</p>

<p>Best practices have established using a <a href="http://docs.spring.io/spring-ws/site/reference/html/why-contract-first.html">http://docs.spring.io/spring-ws/site/reference/html/why-contract-first.html</a>[contract-first] approach is more reliable and resilient.
Spring also documented the prototypical Java SOAP client: <a href="http://spring.io/guides/gs/consuming-web-service/">http://spring.io/guides/gs/consuming-web-service/</a>[Consuming a SOAP web service].
The example has a clear classes &amp; separation of concerns, but still requires a build file to generate code from the WSDL using JAXB.</p>

<p>== My Simple Example: in Groovy</p>

<p>My example breaks the client into 3 parts:</p>

<p>. Creating the Request
. Get the Response
. Extracting Data</p>

<p>=== Creating the Request</p>

<p>The traditional approach creates an object, then marshalls it (converts object to a string).</p>

<h2>[source,groovy]</h2>

<h2>include::source/_posts/SimpleSoap.groovy[lines=17..25]</h2>

<p>Groovy&rsquo;s <a href="http://groovy.codehaus.org/Creating+XML+using+Groovy">http://groovy.codehaus.org/Creating+XML+using+Groovy</a>&rsquo;s+MarkupBuilder[MarkupBuilder] makes it super easy to safely build XML (or HTML).
It can handle attributes, escaping content, and even namespaces!
The XML is patterned from the WSDL&rsquo;s Request object manually, or using <a href="http://www.soapui.org/">http://www.soapui.org/</a>[SoapUI] to build it from the WSDL.</p>

<p>=== Get the Response</p>

<p>Both examples use Spring&rsquo;s WebServiceTemplate methods.</p>

<h2>[source,groovy]</h2>

<h2>include::source/_posts/SimpleSoap.groovy[lines=27..43]</h2>

<p>Spring&rsquo;s <a href="http://docs.spring.io/spring-ws/site/reference/html/client.html">http://docs.spring.io/spring-ws/site/reference/html/client.html</a>[WebServices and Templates] handles calling the SOAP service, callback status and converting the response stream back into a string.</p>

<p>=== Extracting Data</p>

<p>Instead of unmarshalling (converting a string to an object):</p>

<h2>[source,groovy]</h2>

<h2>include::source/_posts/SimpleSoap.groovy[lines=45..55]</h2>

<p>Groovy&rsquo;s <a href="http://groovy.codehaus.org/Reading+XML+using+Groovy">http://groovy.codehaus.org/Reading+XML+using+Groovy</a>&rsquo;s+XmlSlurper[XmlSlurper] takes the place of traditional JAXB unmarshalling.
Instead of mapping XML into Objects, XmlSlurper parses the string into Nodes and <a href="http://groovy.codehaus.org/api/groovy/util/slurpersupport/GPathResult.html">http://groovy.codehaus.org/api/groovy/util/slurpersupport/GPathResult.html</a>[GPathResults].
As long as the names of the nodes you need don&rsquo;t change, you can name the path to the data, or even <code>.depthFirst().collect{ it }.findAll{ it.name() == "NODE_NAME" }</code> which allows the path to change and still work.</p>

<p>== Conclusion</p>

<p>SOAP doesn&rsquo;t have to be intimidating on the JVM platform.
I hope others find the contrast with the traditional JAXB approach informative.
My full working <a href="https://gist.github.com/ItGumby/3fe5c317dc4c898c133c">https://gist.github.com/ItGumby/3fe5c317dc4c898c133c</a>[SimpleSoap.groovy] is posted as a single file in a gist.</p>
]]></content>
  </entry>
  
</feed>
